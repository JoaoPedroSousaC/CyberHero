{"version":3,"sources":["../src/server.ts","../src/database/prisma-client.ts","../src/repositories/user.repository.ts","../src/usecases/user.usecase.ts","../src/routes/user.routes.ts","../src/repositories/administrador.repository.ts","../src/usecases/administrador.usecase.ts","../src/routes/administrador.routes.ts","../src/repositories/jogo.repository.ts","../src/usecases/jogo.usecase.ts","../src/routes/jogo.routes.ts","../src/repositories/conteudoeducativo.repository.ts","../src/usecases/conteudoeducativo.usecase.ts","../src/routes/conteudoeducativo.routes.ts","../src/repositories/conteudoimagem.repository.ts","../src/usecases/conteudoimagem.usecase.ts","../src/routes/conteudoimagem.routes.ts","../src/repositories/loja.repository.ts","../src/usecases/loja.usecase.ts","../src/routes/loja.routes.ts","../src/repositories/medalha.repository.ts","../src/usecases/medalha.usecase.ts","../src/routes/medalha.routes.ts","../src/repositories/medalhadisponivelnaloja.repository.ts","../src/usecases/medalhadisponivelnaloja.usecase.ts","../src/routes/medalhadisponivelnaloja.routes.ts"],"sourcesContent":["import fastify, { FastifyInstance } from \"fastify\";\r\nimport { userRoutes } from \"./routes/user.routes\";\r\nimport { administradorRoutes } from \"./routes/administrador.routes\";\r\nimport { JogoRoutes } from \"./routes/jogo.routes\";\r\nimport { ConteudoEducativoRoutes } from \"./routes/conteudoeducativo.routes\";\r\nimport { ConteudoImagemRoutes } from \"./routes/conteudoimagem.routes\";\r\nimport { LojaRoutes } from \"./routes/loja.routes\";\r\nimport { MedalhaRoutes } from \"./routes/medalha.routes\";\r\nimport { MedalhaDisponivelNaLojaRoutes } from \"./routes/medalhadisponivelnaloja.routes\";\r\nimport cors from '@fastify/cors'\r\nconst app: FastifyInstance = fastify({})\r\n\r\napp.register(userRoutes, {\r\n    prefix: '/users',\r\n    \r\n})\r\n\r\napp.register(administradorRoutes, {\r\n    prefix: '/administrador',\r\n    \r\n})\r\n\r\napp.register( JogoRoutes, {\r\n    prefix: '/jogo',\r\n    \r\n})\r\n\r\napp.register(ConteudoEducativoRoutes, {\r\n    prefix: '/conteudoeducativo',\r\n    \r\n})\r\n\r\napp.register(ConteudoImagemRoutes, {\r\n    prefix: '/conteudoimagem',\r\n    \r\n})\r\n\r\napp.register(LojaRoutes, {\r\n    prefix: '/loja',\r\n    \r\n})\r\n\r\napp.register(MedalhaRoutes, {\r\n    prefix: '/medalha',\r\n    \r\n})\r\n\r\napp.register(MedalhaDisponivelNaLojaRoutes, {\r\n    prefix: '/medalhadisponivelnaloja',\r\n    \r\n})\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n\r\napp.register(cors, {\r\n    origin: '*'\r\n});\r\n\r\napp.listen({\r\n  port: Number(process.env.PORT) || 3000,\r\n  host: '0.0.0.0'\r\n}, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});\r\n","import { PrismaClient } from \"@prisma/client\";\r\n\r\nexport const prisma = new PrismaClient()","import { prisma } from \"../database/prisma-client\";\r\nimport { User, UserCreate, UserRepository, UserUpdate } from \"../interfaces/users.interface\";\r\n\r\nexport class UserRepositoryPrisma implements UserRepository {\r\n    async create(data: UserCreate): Promise<User> {\r\n        const created = await prisma.user.create({\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n                totalpoints: data.totalpoints ?? 0,\r\n                paypoints: data.paypoints ?? 0,\r\n                doneQuiz: data.doneQuiz ?? [],\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByEmail(email: string): Promise<User | null> {\r\n        const user = await prisma.user.findUnique({ where: { email } });\r\n        return user ? this.mapToInterface(user) : null;\r\n    }\r\n\r\n    async get(id: string): Promise<User | null> {\r\n        const user = await prisma.user.findUnique({ where: { id } });\r\n        return user ? this.mapToInterface(user) : null;\r\n    }\r\n\r\n    async update(id: string, data: UserUpdate): Promise<User> {\r\n        const updated = await prisma.user.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n                totalpoints: data.totalpoints,\r\n                paypoints: data.paypoints,\r\n                doneQuiz: data.doneQuiz,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.user.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaUser: any): User {\r\n        return {\r\n            id: prismaUser.id,\r\n            name: prismaUser.name,\r\n            email: prismaUser.email,\r\n            password: prismaUser.password,\r\n            totalpoints: prismaUser.totalpoints,\r\n            paypoints: prismaUser.paypoints,\r\n            doneQuiz: prismaUser.doneQuiz,\r\n            createdAt: prismaUser.createdAt.toISOString(),\r\n            updatedAt: prismaUser.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { User, UserCreate, UserRepository, UserUpdate } from \"../interfaces/users.interface\";\r\nimport { UserRepositoryPrisma } from \"../repositories/user.repository\";\r\n\r\nclass UserUseCase {\r\n    private userRepository: UserRepository;\r\n\r\n    constructor() {\r\n        this.userRepository = new UserRepositoryPrisma();\r\n    }\r\n\r\n    async create({ email, name, password, totalpoints = 0, paypoints = 0, doneQuiz = [] }: UserCreate): Promise<User> {\r\n        const exists = await this.userRepository.findByEmail(email);\r\n        if (exists) throw new Error(\"User already exists\");\r\n\r\n        return await this.userRepository.create({\r\n            email,\r\n            name,\r\n            password,\r\n            totalpoints,\r\n            paypoints,\r\n            doneQuiz,\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<User | null> {\r\n        return await this.userRepository.get(id);\r\n    }\r\n\r\n    async getByEmail(email: string): Promise<User | null> {\r\n        return await this.userRepository.findByEmail(email);\r\n    }\r\n\r\n    async update(id: string, data: UserUpdate): Promise<User> {\r\n        const user = await this.userRepository.get(id);\r\n        if (!user) throw new Error(\"User not found\");\r\n\r\n        return await this.userRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const user = await this.userRepository.get(id);\r\n        if (!user) throw new Error(\"User not found\");\r\n\r\n        await this.userRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { UserUseCase };\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { UserUseCase } from \"../usecases/user.usecase\";\r\nimport { UserCreate } from \"../interfaces/users.interface\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport async function userRoutes(fastify: FastifyInstance) {\r\n    const userUseCase = new UserUseCase();\r\n\r\n    fastify.post<{ Body: UserCreate }>(\"/\", async (req, reply) => {\r\n        const { name, email, password, totalpoints, paypoints, doneQuiz } = req.body;\r\n        try {\r\n            const existingUser = await userUseCase.getByEmail(email);\r\n            if (existingUser) {\r\n                return reply.status(400).send({ error: \"User already exists\" });\r\n            }\r\n\r\n            const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n            const data = await userUseCase.create({\r\n                name,\r\n                email,\r\n                password: hashedPassword,\r\n                totalpoints,\r\n                paypoints,\r\n                doneQuiz,\r\n            });\r\n            return reply.status(201).send(data);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { email: string; password: string } }>(\"/login\", async (req, reply) => {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const user = await userUseCase.getByEmail(email);\r\n            if (!user) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const passwordMatch = await bcrypt.compare(password, user.password);\r\n            if (!passwordMatch) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const token = jwt.sign(\r\n                { userId: user.id, email: user.email },\r\n                process.env.JWT_SECRET || \"supersecretkey\",\r\n                { expiresIn: \"1h\" }\r\n            );\r\n\r\n            return reply.send({ token });\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const user = await userUseCase.get(req.params.id);\r\n            if (!user) {\r\n                return reply.status(404).send({ message: \"User not found\" });\r\n            }\r\n            return reply.send(user);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<UserCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await userUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await userUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { Administrador, AdministradorCreate, AdministradorUpdate, AdministradorRepository} from \"../interfaces/administrador.interface\";\r\n\r\nexport class AdministradorRepositoryPrisma implements AdministradorRepository {\r\n    async create(data: AdministradorCreate): Promise<Administrador> {\r\n        const created = await prisma.administrador.create({\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByEmail(email: string): Promise<Administrador | null> {\r\n        const administrador = await prisma.administrador.findUnique({ where: { email } });\r\n        return administrador ? this.mapToInterface(administrador) : null;\r\n    }\r\n\r\n    async get(id: string): Promise<Administrador | null> {\r\n        const administrador = await prisma.administrador.findUnique({ where: { id } });\r\n        return administrador ? this.mapToInterface(administrador) : null;\r\n    }\r\n\r\n    async update(id: string, data: AdministradorUpdate): Promise<Administrador> {\r\n        const updated = await prisma.administrador.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.administrador.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaAdministrador: any): Administrador {\r\n        return {\r\n            id: prismaAdministrador.id,\r\n            name: prismaAdministrador.name,\r\n            email: prismaAdministrador.email,\r\n            password: prismaAdministrador.password,\r\n            createdAt: prismaAdministrador.createdAt.toISOString(),\r\n            updatedAt: prismaAdministrador.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { Administrador, AdministradorCreate, AdministradorUpdate, AdministradorRepository} from \"../interfaces/administrador.interface\";\r\nimport { AdministradorRepositoryPrisma } from \"../repositories/administrador.repository\";\r\n\r\nclass AdministradorUseCase {\r\n    private administradorRepository: AdministradorRepository;\r\n\r\n    constructor() {\r\n        this.administradorRepository = new AdministradorRepositoryPrisma();\r\n    }\r\n\r\n    async create({ email, name, password }: AdministradorCreate): Promise<Administrador> {\r\n        const exists = await this.administradorRepository.findByEmail(email);\r\n        if (exists) throw new Error(\"Administrador already exists\");\r\n\r\n        return await this.administradorRepository.create({\r\n            email,\r\n            name,\r\n            password\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<Administrador | null> {\r\n        return await this.administradorRepository.get(id);\r\n    }\r\n\r\n    async getByEmail(email: string): Promise<Administrador | null> {\r\n        return await this.administradorRepository.findByEmail(email);\r\n    }\r\n\r\n    async update(id: string, data: AdministradorUpdate): Promise<Administrador> {\r\n        const administrador = await this.administradorRepository.get(id);\r\n        if (!administrador) throw new Error(\"Administrador not found\");\r\n\r\n        return await this.administradorRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const administrador = await this.administradorRepository.get(id);\r\n        if (!administrador) throw new Error(\"Administrador not found\");\r\n\r\n        await this.administradorRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { AdministradorUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { AdministradorUseCase } from \"../usecases/administrador.usecase\";\r\nimport { AdministradorCreate } from \"../interfaces/administrador.interface\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport async function administradorRoutes(fastify: FastifyInstance) {\r\n    const administradorUseCase = new AdministradorUseCase();\r\n\r\n    fastify.post<{ Body: AdministradorCreate }>(\"/\", async (req, reply) => {\r\n        const { name, email, password} = req.body;\r\n        try {\r\n            const existingAdministrador = await administradorUseCase.getByEmail(email);\r\n            if (existingAdministrador) {\r\n                return reply.status(400).send({ error: \"Administrador already exists\" });\r\n            }\r\n\r\n            const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n            const data = await administradorUseCase.create({\r\n                name,\r\n                email,\r\n                password: hashedPassword,\r\n            });\r\n            return reply.status(201).send(data);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { email: string; password: string } }>(\"/login\", async (req, reply) => {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const administrador = await administradorUseCase.getByEmail(email);\r\n            if (!administrador) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const passwordMatch = await bcrypt.compare(password, administrador.password);\r\n            if (!passwordMatch) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const token = jwt.sign(\r\n                { administradorId: administrador.id, email: administrador.email },\r\n                process.env.JWT_SECRET || \"supersecretkey\",\r\n                { expiresIn: \"1h\" }\r\n            );\r\n\r\n            return reply.send({ token });\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const administrador = await administradorUseCase.get(req.params.id);\r\n            if (!administrador) {\r\n                return reply.status(404).send({ message: \"Administrador not found\" });\r\n            }\r\n            return reply.send(administrador);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<AdministradorCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await administradorUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await administradorUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { Jogo, JogoCreate, JogoUpdate, JogoRepository} from \"../interfaces/Jogo.interface\";\r\n\r\nexport class JogoRepositoryPrisma implements JogoRepository {\r\n    async create(data: JogoCreate): Promise<Jogo> {\r\n        const created = await prisma.Jogo.create({\r\n            data: {\r\n                name: data.name,\r\n                descricao: data.descricao,\r\n                points: data.points,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByName(Name: string): Promise<Jogo | null> {\r\n            const jogo = await prisma.jogo.findUnique({ where: { Name } });\r\n            return jogo ? this.mapToInterface(jogo) : null;\r\n        }\r\n\r\n    async get(id: string): Promise<Jogo | null> {\r\n        const Jogo = await prisma.jogo.findUnique({ where: { id } });\r\n        return Jogo ? this.mapToInterface(Jogo) : null;\r\n    }\r\n\r\n    async update(id: string, data: JogoUpdate): Promise<Jogo> {\r\n        const updated = await prisma.Jogo.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                descricao: data.descricao,\r\n                points: data.points,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.Jogo.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaJogo: any): Jogo {\r\n        return {\r\n            id: prismaJogo.id,\r\n            name: prismaJogo.name,\r\n            descricao: prismaJogo.descricao,\r\n            points: prismaJogo.points,\r\n            createdAt: prismaJogo.createdAt.toISOString(),\r\n            updatedAt: prismaJogo.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { Jogo, JogoCreate, JogoUpdate, JogoRepository} from \"../interfaces/jogo.interface\";\r\nimport { JogoRepositoryPrisma } from \"../repositories/jogo.repository\";\r\n\r\nclass JogoUseCase {\r\n    private JogoRepository: JogoRepository;\r\n\r\n    constructor() {\r\n        this.JogoRepository = new JogoRepositoryPrisma();\r\n    }\r\n\r\n    async create({ descricao, name, points }: JogoCreate): Promise<Jogo> {\r\n        const exists = await this.JogoRepository.findByName(name);\r\n        if (exists) throw new Error(\"Jogo already exists\");\r\n\r\n        return await this.JogoRepository.create({\r\n            descricao,\r\n            name,\r\n            points\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<Jogo | null> {\r\n        return await this.JogoRepository.get(id);\r\n    }\r\n\r\n    async getByName(name: string): Promise<Jogo | null> {\r\n        return await this.JogoRepository.findByName(name);\r\n    }\r\n\r\n    async update(id: string, data: JogoUpdate): Promise<Jogo> {\r\n        const Jogo = await this.JogoRepository.get(id);\r\n        if (!Jogo) throw new Error(\"Jogo not found\");\r\n\r\n        return await this.JogoRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const Jogo = await this.JogoRepository.get(id);\r\n        if (!Jogo) throw new Error(\"Jogo not found\");\r\n\r\n        await this.JogoRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { JogoUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { JogoUseCase } from \"../usecases/jogo.usecase\";\r\nimport { JogoCreate } from \"../interfaces/jogo.interface\";\r\n\r\nexport async function JogoRoutes(fastify: FastifyInstance) {\r\n    // const { JogoUseCase } = require('../usecases/jogo.usecase');\r\n    const jogo = new JogoUseCase();\r\n\r\n    fastify.post<{ Body: JogoCreate }>(\"/\", async (req, reply) => {\r\n        const { name, descricao, points} = req.body;\r\n        try {\r\n            const existingJogo = await JogoUseCase.getByName(name);\r\n            if (existingJogo) {\r\n                return reply.status(400).send({ error: \"Jogo already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { name: string, descricao: string; points: number } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { name } = req.body;\r\n            const Jogo = await JogoUseCase.getByName(name);\r\n            if (!Jogo) {\r\n                return reply.status(401).send({ error: \"Invalid name\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const Jogo = await JogoUseCase.get(req.params.id);\r\n            if (!Jogo) {\r\n                return reply.status(404).send({ message: \"Jogo not found\" });\r\n            }\r\n            return reply.send(Jogo);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<JogoCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await JogoUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await JogoUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { ConteudoEducativo, ConteudoEducativoCreate, ConteudoEducativoUpdate, ConteudoEducativoRepository} from \"../interfaces/ConteudoEducativo.interface\";\r\n\r\nexport class ConteudoEducativoRepositoryPrisma implements ConteudoEducativoRepository {\r\n    async create(data: ConteudoEducativoCreate): Promise<ConteudoEducativo> {\r\n        const created = await prisma.ConteudoEducativo.create({\r\n            data: {\r\n                name: data.name,\r\n                titulo: data.titulo,\r\n                texto: data.texto,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByTitulo(Titulo: string): Promise<ConteudoEducativo | null> {\r\n            const conteudoeducativo = await prisma.conteudoeducativo.findUnique({ where: { Titulo } });\r\n            return conteudoeducativo ? this.mapToInterface(conteudoeducativo) : null;\r\n        }\r\n\r\n    async get(id: string): Promise<ConteudoEducativo | null> {\r\n        const ConteudoEducativo = await prisma.conteudoeducativo.findUnique({ where: { id } });\r\n        return ConteudoEducativo ? this.mapToInterface(ConteudoEducativo) : null;\r\n    }\r\n\r\n    async update(id: string, data: ConteudoEducativoUpdate): Promise<ConteudoEducativo> {\r\n        const updated = await prisma.ConteudoEducativo.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                titulo: data.titulo,\r\n                texto: data.texto,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.ConteudoEducativo.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaConteudoEducativo: any): ConteudoEducativo {\r\n        return {\r\n            id: prismaConteudoEducativo.id,\r\n            name: prismaConteudoEducativo.name,\r\n            titulo: prismaConteudoEducativo.titulo,\r\n            texto: prismaConteudoEducativo.texto,\r\n            createdAt: prismaConteudoEducativo.createdAt.toISOString(),\r\n            updatedAt: prismaConteudoEducativo.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { ConteudoEducativo, ConteudoEducativoCreate, ConteudoEducativoUpdate, ConteudoEducativoRepository} from \"../interfaces/conteudoeducativo.interface\";\r\nimport { ConteudoEducativoRepositoryPrisma } from \"../repositories/conteudoeducativo.repository\";\r\n\r\nclass ConteudoEducativoUseCase {\r\n    private ConteudoEducativoRepository: ConteudoEducativoRepository;\r\n\r\n    constructor() {\r\n        this.ConteudoEducativoRepository = new ConteudoEducativoRepositoryPrisma();\r\n    }\r\n\r\n    async create({ titulo, name, texto }: ConteudoEducativoCreate): Promise<ConteudoEducativo> {\r\n        const exists = await this.ConteudoEducativoRepository.findByTitulo(titulo);\r\n        if (exists) throw new Error(\"ConteudoEducativo already exists\");\r\n\r\n        return await this.ConteudoEducativoRepository.create({\r\n            titulo,\r\n            name,\r\n            texto\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<ConteudoEducativo | null> {\r\n        return await this.ConteudoEducativoRepository.get(id);\r\n    }\r\n\r\n    async getBytitulo(titulo: string): Promise<ConteudoEducativo | null> {\r\n        return await this.ConteudoEducativoRepository.findByTitulo(titulo);\r\n    }\r\n\r\n    async update(id: string, data: ConteudoEducativoUpdate): Promise<ConteudoEducativo> {\r\n        const ConteudoEducativo = await this.ConteudoEducativoRepository.get(id);\r\n        if (!ConteudoEducativo) throw new Error(\"ConteudoEducativo not found\");\r\n\r\n        return await this.ConteudoEducativoRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const ConteudoEducativo = await this.ConteudoEducativoRepository.get(id);\r\n        if (!ConteudoEducativo) throw new Error(\"ConteudoEducativo not found\");\r\n\r\n        await this.ConteudoEducativoRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { ConteudoEducativoUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { ConteudoEducativoUseCase } from \"../usecases/conteudoeducativo.usecase\";\r\nimport { ConteudoEducativoCreate } from \"../interfaces/conteudoeducativo.interface\";\r\n\r\nexport async function ConteudoEducativoRoutes(fastify: FastifyInstance) {\r\n    // const { ConteudoEducativoUseCase } = require('../usecases/conteudoeducativo.usecase');\r\n    const conteudoeducativo = new ConteudoEducativoUseCase();\r\n\r\n    fastify.post<{ Body: ConteudoEducativoCreate }>(\"/\", async (req, reply) => {\r\n        const { name, titulo, texto} = req.body;\r\n        try {\r\n            const existingConteudoEducativo = await ConteudoEducativoUseCase.getByTitulo(titulo);\r\n            if (existingConteudoEducativo) {\r\n                return reply.status(400).send({ error: \"ConteudoEducativo already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { titulo: string; texto: string } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { titulo} = req.body;\r\n            const ConteudoEducativo = await ConteudoEducativoUseCase.getByTitulo(titulo);\r\n            if (!ConteudoEducativo) {\r\n                return reply.status(401).send({ error: \"Invalid titulo or texto\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const ConteudoEducativo = await ConteudoEducativoUseCase.get(req.params.id);\r\n            if (!ConteudoEducativo) {\r\n                return reply.status(404).send({ message: \"ConteudoEducativo not found\" });\r\n            }\r\n            return reply.send(ConteudoEducativo);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<ConteudoEducativoCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await ConteudoEducativoUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await ConteudoEducativoUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { ConteudoImagem, ConteudoImagemCreate, ConteudoImagemUpdate, ConteudoImagemRepository} from \"../interfaces/ConteudoImagem.interface\";\r\n\r\nexport class ConteudoImagemRepositoryPrisma implements ConteudoImagemRepository {\r\n    async create(data: ConteudoImagemCreate): Promise<ConteudoImagem> {\r\n        const created = await prisma.ConteudoImagem.create({\r\n            data: {\r\n                url: data.url\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByUrl(Id: string): Promise<ConteudoImagem | null> {\r\n            const conteudoimagem = await prisma.conteudoimagem.findUnique({ where: { Url } });\r\n            return conteudoimagem ? this.mapToInterface(conteudoimagem) : null;\r\n        }\r\n\r\n    async get(id: string): Promise<ConteudoImagem | null> {\r\n        const ConteudoImagem = await prisma.conteudoimagem.findUnique({ where: { id } });\r\n        return ConteudoImagem ? this.mapToInterface(ConteudoImagem) : null;\r\n    }\r\n\r\n    async update(id: string, data: ConteudoImagemUpdate): Promise<ConteudoImagem> {\r\n        const updated = await prisma.ConteudoImagem.update({\r\n            where: { id },\r\n            data: {\r\n                url: data.url\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.ConteudoImagem.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaConteudoImagem: any): ConteudoImagem {\r\n        return {\r\n            id: prismaConteudoImagem.id,\r\n            url: prismaConteudoImagem.url,\r\n            createdAt: prismaConteudoImagem.createdAt.toISOString(),\r\n            updatedAt: prismaConteudoImagem.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { ConteudoImagem, ConteudoImagemCreate, ConteudoImagemUpdate, ConteudoImagemRepository} from \"../interfaces/conteudoimagem.interface\";\r\nimport { ConteudoImagemRepositoryPrisma } from \"../repositories/conteudoimagem.repository\";\r\n\r\nclass ConteudoImagemUseCase {\r\n    private ConteudoImagemRepository: ConteudoImagemRepository;\r\n\r\n    constructor() {\r\n        this.ConteudoImagemRepository = new ConteudoImagemRepositoryPrisma();\r\n    }\r\n\r\n    async create({ url }: ConteudoImagemCreate): Promise<ConteudoImagem> {\r\n        const exists = await this.ConteudoImagemRepository.findByUrl(url);\r\n        if (exists) throw new Error(\"ConteudoImagem already exists\");\r\n\r\n        return await this.ConteudoImagemRepository.create({\r\n            url\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<ConteudoImagem | null> {\r\n        return await this.ConteudoImagemRepository.get(id);\r\n    }\r\n\r\n    async getBytitulo(titulo: string): Promise<ConteudoImagem | null> {\r\n        return await this.ConteudoImagemRepository.findByUrl(url);\r\n    }\r\n\r\n    async update(id: string, data: ConteudoImagemUpdate): Promise<ConteudoImagem> {\r\n        const ConteudoImagem = await this.ConteudoImagemRepository.get(id);\r\n        if (!ConteudoImagem) throw new Error(\"ConteudoImagem not found\");\r\n\r\n        return await this.ConteudoImagemRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const ConteudoImagem = await this.ConteudoImagemRepository.get(id);\r\n        if (!ConteudoImagem) throw new Error(\"ConteudoImagem not found\");\r\n\r\n        await this.ConteudoImagemRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { ConteudoImagemUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { ConteudoImagemUseCase } from \"../usecases/conteudoimagem.usecase\";\r\nimport { ConteudoImagemCreate } from \"../interfaces/conteudoimagem.interface\";\r\n\r\nexport async function ConteudoImagemRoutes(fastify: FastifyInstance) {\r\n    // const { ConteudoImagemUseCase } = require('../usecases/conteudoimagem.usecase');\r\n    const conteudoimagem = new ConteudoImagemUseCase();\r\n\r\n    fastify.post<{ Body: ConteudoImagemCreate }>(\"/\", async (req, reply) => {\r\n        const { url} = req.body;\r\n        try {\r\n            const existingConteudoImagem = await ConteudoImagemUseCase.getByUrl(url);\r\n            if (existingConteudoImagem) {\r\n                return reply.status(400).send({ error: \"ConteudoImagem already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { titulo: string; texto: string } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { titulo} = req.body;\r\n            const ConteudoImagem = await ConteudoImagemUseCase.getByTitulo(titulo);\r\n            if (!ConteudoImagem) {\r\n                return reply.status(401).send({ error: \"Invalid titulo or texto\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const ConteudoImagem = await ConteudoImagemUseCase.get(req.params.id);\r\n            if (!ConteudoImagem) {\r\n                return reply.status(404).send({ message: \"ConteudoImagem not found\" });\r\n            }\r\n            return reply.send(ConteudoImagem);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<ConteudoImagemCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await ConteudoImagemUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await ConteudoImagemUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { Loja, LojaCreate, LojaUpdate, LojaRepository} from \"../interfaces/Loja.interface\";\r\n\r\nexport class LojaRepositoryPrisma implements LojaRepository {\r\n    async create(data: LojaCreate): Promise<Loja> {\r\n        const created = await prisma.Loja.create({\r\n            data: {\r\n                name: data.name,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByName(Name: string): Promise<Loja | null> {\r\n            const loja = await prisma.loja.findUnique({ where: { Name } });\r\n            return loja ? this.mapToInterface(loja) : null;\r\n        }\r\n\r\n    async get(id: string): Promise<Loja | null> {\r\n        const Loja = await prisma.loja.findUnique({ where: { id } });\r\n        return Loja ? this.mapToInterface(Loja) : null;\r\n    }\r\n\r\n    async update(id: string, data: LojaUpdate): Promise<Loja> {\r\n        const updated = await prisma.Loja.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.Loja.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaLoja: any): Loja {\r\n        return {\r\n            id: prismaLoja.id,\r\n            name: prismaLoja.name,\r\n            createdAt: prismaLoja.createdAt.toISOString(),\r\n            updatedAt: prismaLoja.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { Loja, LojaCreate, LojaUpdate, LojaRepository} from \"../interfaces/loja.interface\";\r\nimport { LojaRepositoryPrisma } from \"../repositories/loja.repository\";\r\n\r\nclass LojaUseCase {\r\n    private LojaRepository: LojaRepository;\r\n\r\n    constructor() {\r\n        this.LojaRepository = new LojaRepositoryPrisma();\r\n    }\r\n\r\n    async create({ name }: LojaCreate): Promise<Loja> {\r\n        const exists = await this.LojaRepository.findByName(name);\r\n        if (exists) throw new Error(\"Loja already exists\");\r\n\r\n        return await this.LojaRepository.create({\r\n            name,\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<Loja | null> {\r\n        return await this.LojaRepository.get(id);\r\n    }\r\n\r\n    async getByName(name: string): Promise<Loja | null> {\r\n        return await this.LojaRepository.findByName(name);\r\n    }\r\n\r\n    async update(id: string, data: LojaUpdate): Promise<Loja> {\r\n        const Loja = await this.LojaRepository.get(id);\r\n        if (!Loja) throw new Error(\"Loja not found\");\r\n\r\n        return await this.LojaRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const Loja = await this.LojaRepository.get(id);\r\n        if (!Loja) throw new Error(\"Loja not found\");\r\n\r\n        await this.LojaRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { LojaUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { LojaUseCase } from \"../usecases/loja.usecase\";\r\nimport { LojaCreate } from \"../interfaces/loja.interface\";\r\n\r\nexport async function LojaRoutes(fastify: FastifyInstance) {\r\n    // const { LojaUseCase } = require('../usecases/loja.usecase');\r\n    const loja = new LojaUseCase();\r\n\r\n    fastify.post<{ Body: LojaCreate }>(\"/\", async (req, reply) => {\r\n        const { name } = req.body;\r\n        try {\r\n            const existingLoja = await LojaUseCase.getByName(name);\r\n            if (existingLoja) {\r\n                return reply.status(400).send({ error: \"Loja already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { name: string, descricao: string; points: number } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { name } = req.body;\r\n            const Loja = await LojaUseCase.getByName(name);\r\n            if (!Loja) {\r\n                return reply.status(401).send({ error: \"Invalid name\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const Loja = await LojaUseCase.get(req.params.id);\r\n            if (!Loja) {\r\n                return reply.status(404).send({ message: \"Loja not found\" });\r\n            }\r\n            return reply.send(Loja);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<LojaCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await LojaUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await LojaUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { Medalha, MedalhaCreate, MedalhaUpdate, MedalhaRepository} from \"../interfaces/Medalha.interface\";\r\n\r\nexport class MedalhaRepositoryPrisma implements MedalhaRepository {\r\n    async create(data: MedalhaCreate): Promise<Medalha> {\r\n        const created = await prisma.Medalha.create({\r\n            data: {\r\n                name: data.name,\r\n                descricao: data.descricao,\r\n                icon: data.icon,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByDescricao(Descricao: string): Promise<Medalha | null> {\r\n            const medalha = await prisma.medalha.findUnique({ where: { Descricao } });\r\n            return medalha ? this.mapToInterface(medalha) : null;\r\n        }\r\n\r\n    async get(id: string): Promise<Medalha | null> {\r\n        const Medalha = await prisma.medalha.findUnique({ where: { id } });\r\n        return Medalha ? this.mapToInterface(Medalha) : null;\r\n    }\r\n\r\n    async update(id: string, data: MedalhaUpdate): Promise<Medalha> {\r\n        const updated = await prisma.Medalha.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                descricao: data.descricao,\r\n                icon: data.icon,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.Medalha.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaMedalha: any): Medalha {\r\n        return {\r\n            id: prismaMedalha.id,\r\n            name: prismaMedalha.name,\r\n            descricao: prismaMedalha.descricao,\r\n            icon: prismaMedalha.icon,\r\n            createdAt: prismaMedalha.createdAt.toISOString(),\r\n            updatedAt: prismaMedalha.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { Medalha, MedalhaCreate, MedalhaUpdate, MedalhaRepository} from \"../interfaces/medalha.interface\";\r\nimport { MedalhaRepositoryPrisma } from \"../repositories/medalha.repository\";\r\n\r\nclass MedalhaUseCase {\r\n    private MedalhaRepository: MedalhaRepository;\r\n\r\n    constructor() {\r\n        this.MedalhaRepository = new MedalhaRepositoryPrisma();\r\n    }\r\n\r\n    async create({ descricao, name, icon }: MedalhaCreate): Promise<Medalha> {\r\n        const exists = await this.MedalhaRepository.findByDescricao(descricao);\r\n        if (exists) throw new Error(\"Medalha already exists\");\r\n\r\n        return await this.MedalhaRepository.create({\r\n            descricao,\r\n            name,\r\n            icon\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<Medalha | null> {\r\n        return await this.MedalhaRepository.get(id);\r\n    }\r\n\r\n    async getBydescricao(descricao: string): Promise<Medalha | null> {\r\n        return await this.MedalhaRepository.findByDescricao(descricao);\r\n    }\r\n\r\n    async update(id: string, data: MedalhaUpdate): Promise<Medalha> {\r\n        const Medalha = await this.MedalhaRepository.get(id);\r\n        if (!Medalha) throw new Error(\"Medalha not found\");\r\n\r\n        return await this.MedalhaRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const Medalha = await this.MedalhaRepository.get(id);\r\n        if (!Medalha) throw new Error(\"Medalha not found\");\r\n\r\n        await this.MedalhaRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { MedalhaUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { MedalhaUseCase } from \"../usecases/medalha.usecase\";\r\nimport { MedalhaCreate } from \"../interfaces/medalha.interface\";\r\n\r\nexport async function MedalhaRoutes(fastify: FastifyInstance) {\r\n    // const { MedalhaUseCase } = require('../usecases/medalha.usecase');\r\n    const medalha = new MedalhaUseCase();\r\n\r\n    fastify.post<{ Body: MedalhaCreate }>(\"/\", async (req, reply) => {\r\n        const { name, descricao, icon} = req.body;\r\n        try {\r\n            const existingMedalha = await MedalhaUseCase.getByDescricao(descricao);\r\n            if (existingMedalha) {\r\n                return reply.status(400).send({ error: \"Medalha already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { descricao: string; icon: string } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { descricao} = req.body;\r\n            const Medalha = await MedalhaUseCase.getByDescricao(descricao);\r\n            if (!Medalha) {\r\n                return reply.status(401).send({ error: \"Invalid descricao or icon\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const Medalha = await MedalhaUseCase.get(req.params.id);\r\n            if (!Medalha) {\r\n                return reply.status(404).send({ message: \"Medalha not found\" });\r\n            }\r\n            return reply.send(Medalha);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<MedalhaCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await MedalhaUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await MedalhaUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { MedalhaDisponivelNaLoja, MedalhaDisponivelNaLojaCreate, MedalhaDisponivelNaLojaUpdate, MedalhaDisponivelNaLojaRepository} from \"../interfaces/MedalhaDisponivelNaLoja.interface\";\r\n\r\nexport class MedalhaDisponivelNaLojaRepositoryPrisma implements MedalhaDisponivelNaLojaRepository {\r\n    async create(data: MedalhaDisponivelNaLojaCreate): Promise<MedalhaDisponivelNaLoja> {\r\n        const created = await prisma.MedalhaDisponivelNaLoja.create({\r\n            data: {\r\n                preco: data.preco,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByName(Name: string): Promise<MedalhaDisponivelNaLoja | null> {\r\n            const medalhadisponivelnaloja = await prisma.medalhadisponivelnaloja.findUnique({ where: { Name } });\r\n            return medalhadisponivelnaloja ? this.mapToInterface(medalhadisponivelnaloja) : null;\r\n        }\r\n\r\n    async get(id: string): Promise<MedalhaDisponivelNaLoja | null> {\r\n        const MedalhaDisponivelNaLoja = await prisma.medalhadisponivelnaloja.findUnique({ where: { id } });\r\n        return MedalhaDisponivelNaLoja ? this.mapToInterface(MedalhaDisponivelNaLoja) : null;\r\n    }\r\n\r\n    async update(id: string, data: MedalhaDisponivelNaLojaUpdate): Promise<MedalhaDisponivelNaLoja> {\r\n        const updated = await prisma.MedalhaDisponivelNaLoja.update({\r\n            where: { id },\r\n            data: {\r\n                preco: data.preco,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.MedalhaDisponivelNaLoja.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaMedalhaDisponivelNaLoja: any): MedalhaDisponivelNaLoja {\r\n        return {\r\n            id: prismaMedalhaDisponivelNaLoja.id,\r\n            preco: prismaMedalhaDisponivelNaLoja.preco,\r\n            createdAt: prismaMedalhaDisponivelNaLoja.createdAt.toISOString(),\r\n            updatedAt: prismaMedalhaDisponivelNaLoja.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { MedalhaDisponivelNaLoja, MedalhaDisponivelNaLojaCreate, MedalhaDisponivelNaLojaUpdate, MedalhaDisponivelNaLojaRepository} from \"../interfaces/medalhadisponivelnaloja.interface\";\r\nimport { MedalhaDisponivelNaLojaRepositoryPrisma } from \"../repositories/medalhadisponivelnaloja.repository\";\r\n\r\nclass MedalhaDisponivelNaLojaUseCase {\r\n    private MedalhaDisponivelNaLojaRepository: MedalhaDisponivelNaLojaRepository;\r\n\r\n    constructor() {\r\n        this.MedalhaDisponivelNaLojaRepository = new MedalhaDisponivelNaLojaRepositoryPrisma();\r\n    }\r\n\r\n    async create({ preco }: MedalhaDisponivelNaLojaCreate): Promise<MedalhaDisponivelNaLoja> {\r\n        const exists = await this.MedalhaDisponivelNaLojaRepository.findByPreco(preco);\r\n        if (exists) throw new Error(\"MedalhaDisponivelNaLoja already exists\");\r\n\r\n        return await this.MedalhaDisponivelNaLojaRepository.create({\r\n            preco,\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<MedalhaDisponivelNaLoja | null> {\r\n        return await this.MedalhaDisponivelNaLojaRepository.get(id);\r\n    }\r\n\r\n    async getByPreco(preco: string): Promise<MedalhaDisponivelNaLoja | null> {\r\n        return await this.MedalhaDisponivelNaLojaRepository.findByPreco(preco);\r\n    }\r\n\r\n    async update(id: string, data: MedalhaDisponivelNaLojaUpdate): Promise<MedalhaDisponivelNaLoja> {\r\n        const MedalhaDisponivelNaLoja = await this.MedalhaDisponivelNaLojaRepository.get(id);\r\n        if (!MedalhaDisponivelNaLoja) throw new Error(\"MedalhaDisponivelNaLoja not found\");\r\n\r\n        return await this.MedalhaDisponivelNaLojaRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const MedalhaDisponivelNaLoja = await this.MedalhaDisponivelNaLojaRepository.get(id);\r\n        if (!MedalhaDisponivelNaLoja) throw new Error(\"MedalhaDisponivelNaLoja not found\");\r\n\r\n        await this.MedalhaDisponivelNaLojaRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { MedalhaDisponivelNaLojaUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { MedalhaDisponivelNaLojaUseCase } from \"../usecases/medalhadisponivelnaloja.usecase\";\r\nimport { MedalhaDisponivelNaLojaCreate } from \"../interfaces/medalhadisponivelnaloja.interface\";\r\n\r\nexport async function MedalhaDisponivelNaLojaRoutes(fastify: FastifyInstance) {\r\n    // const { MedalhaDisponivelNaLojaUseCase } = require('../usecases/medalhadisponivelnaloja.usecase');\r\n    const medalhadisponivelnaloja = new MedalhaDisponivelNaLojaUseCase();\r\n\r\n    fastify.post<{ Body: MedalhaDisponivelNaLojaCreate }>(\"/\", async (req, reply) => {\r\n        const { preco } = req.body;\r\n        try {\r\n            const existingMedalhaDisponivelNaLoja = await MedalhaDisponivelNaLojaUseCase.getByPreco(preco);\r\n            if (existingMedalhaDisponivelNaLoja) {\r\n                return reply.status(400).send({ error: \"MedalhaDisponivelNaLoja already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { preco: string, descricao: string; points: number } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { preco } = req.body;\r\n            const MedalhaDisponivelNaLoja = await MedalhaDisponivelNaLojaUseCase.getByPreco(preco);\r\n            if (!MedalhaDisponivelNaLoja) {\r\n                return reply.status(401).send({ error: \"Invalid preco\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const MedalhaDisponivelNaLoja = await MedalhaDisponivelNaLojaUseCase.get(req.params.id);\r\n            if (!MedalhaDisponivelNaLoja) {\r\n                return reply.status(404).send({ message: \"MedalhaDisponivelNaLoja not found\" });\r\n            }\r\n            return reply.send(MedalhaDisponivelNaLoja);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<MedalhaDisponivelNaLojaCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await MedalhaDisponivelNaLojaUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await MedalhaDisponivelNaLojaUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","names":["fastify","bcrypt","jwt","import_bcrypt","import_jsonwebtoken","fastify","bcrypt","jwt","fastify","fastify","url","fastify","url","fastify","fastify","fastify","fastify","cors"]}